buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://maven.parchmentmc.org' }  // Parchment mappings
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.parchmentmc:librarian:1.+'
        classpath 'org.spongepowered:mixingradle:0.7.+'
    }
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'org.spongepowered.mixin'

def mcversion = '1.16.5'

version = '1.3.0'
group = 'bret.worldexporter' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "worldexporter-${mcversion}"

java.toolchain.languageVersion = JavaLanguageVersion.of(8) // Mojang ships Java 8 to end users, so your mod should target Java 8.

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // Channel:   Version:
    // snapshot   YYYYMMDD   Snapshot are built nightly.
    // stable     #          Stables are built at the discretion of the MCP team.
    // official   MCVersion  Official field/method names from Mojang mapping files
    //
    // You must be aware of the Mojang license when using the 'official' mappings.
    // See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
    //
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    // mappings channel: 'official', version: '1.16.5'
    mappings channel: 'parchment', version: '2022.03.06-1.16.5'
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be changed as needed.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            // might be required for running dev environment with other mods that use mixins (?)
            // property 'mixin.env.remapRefMap', 'true'
            // property 'mixin.env.refMapRemappingFile', "${project.projectDir}/build/createSrgToMcp/output.srg"

            mods {
                worldexporter {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be changed as needed.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            // might be required for running dev environment with other mods that use mixins (?)
            // property 'mixin.env.remapRefMap', 'true'
            // property 'mixin.env.refMapRemappingFile', "${project.projectDir}/build/createSrgToMcp/output.srg"

            mods {
                worldexporter {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be changed as needed.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            // might be required for running dev environment with other mods that use mixins (?)
            // property 'mixin.env.remapRefMap', 'true'
            // property 'mixin.env.refMapRemappingFile', "${project.projectDir}/build/createSrgToMcp/output.srg"

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'worldexporter', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                worldexporter {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

// for running the dev environment with other mods
repositories {
//     maven { url = "https://dvs1.progwml6.com/files/maven/" }
    flatDir {
        dirs 'libs'
    }
}

dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft 'net.minecraftforge:forge:1.16.5-36.2.39'

    annotationProcessor 'org.spongepowered:mixin:0.8.4:processor'

    // You may put jars on which you depend on in ./libs or you may define them like so..
    // compile "some.group:artifact:version:classifier"
    // compile "some.group:artifact:version"

    // for running the dev environment with other mods
    // runtimeOnly fg.deobf("mezz.jei:jei-1.16.5:7.7.1.153")

    // Real examples
    // compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    // compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // The 'provided' configuration is for optional dependencies that exist at compile-time but might not at runtime.
    // provided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // These dependencies get remapped to your current MCP mappings
    // deobf 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // For more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

    // For CodeChickenLib + running dev environment with other mods
    // fileTree does not seem to work
//    runtimeOnly fg.deobf("codechicken:CodeChickenLib:1.16.5-4.0.7.445-universal")
//    runtimeOnly fg.deobf("framedblocks:FramedBlocks:2.16.1")
//    runtimeOnly fg.deobf("cofh:cofh_core:1.16.5-1.5.0.11")
//    runtimeOnly fg.deobf("thermalexpansion:thermal_expansion:1.16.5-1.5.0.7")
//    runtimeOnly fg.deobf("thermalexpansion:thermal_cultivation:1.16.5-1.5.0.4")
//    runtimeOnly fg.deobf("thermalexpansion:thermal_foundation:1.16.5-1.5.0.14")
//    runtimeOnly fg.deobf("thermalexpansion:thermal_innovation:1.16.5-1.5.0.4")
//    runtimeOnly fg.deobf("thermalexpansion:thermal_locomotion:1.16.5-1.5.0.4")
//    runtimeOnly fg.deobf("thermalexpansion:thermal_locomotion:1.16.5-1.5.0.4")
//    runtimeOnly fg.deobf("ctm:CTM:MC1.16.1-1.1.2.6")
//    runtimeOnly fg.deobf("zycraft:ZYCraft:1.16.5-3.1.34")
//    runtimeOnly fg.deobf("configured:configured:1.5.2-1.16.5")
//    runtimeOnly fg.deobf("patchouli:Patchouli:1.16.4-53.3")
//    runtimeOnly fg.deobf("curios:curios-forge:1.16.5-4.1.0.0")
//    runtimeOnly fg.deobf("botania:Botania:1.16.5-420.3")
//    runtimeOnly fg.deobf("mekanism:Mekanism:1.16.5-10.1.2.457")
//    runtimeOnly fg.deobf("mekanism:MekanismAdditions:1.16.5-10.1.2.457")
//    runtimeOnly fg.deobf("mekanism:MekanismGenerators:1.16.5-10.1.2.457")
//    runtimeOnly fg.deobf("mekanism:MekanismTools:1.16.5-10.1.2.457")
//    runtimeOnly fg.deobf("mobgrindingutils:mob_grinding_utils:1.16.5-0.4.47")
//    runtimeOnly fg.deobf("chisel:Chisel:MC1.16.5-2.0.1-alpha.4")
}

mixin {
    add sourceSets.main, 'worldexporter.mixin.refmap.json'
    config 'worldexporter.mixin.json'

    debug.verbose = true
    debug.export = true

    quiet
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
            "Specification-Title": "worldexporter",
            "Specification-Vendor": "worldexporter",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"worldexporter",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}
